// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: debugger_message.proto

#ifndef PROTOBUF_debugger_5fmessage_2eproto__INCLUDED
#define PROTOBUF_debugger_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace android {
namespace glesv2debugger {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_debugger_5fmessage_2eproto();
void protobuf_AssignDesc_debugger_5fmessage_2eproto();
void protobuf_ShutdownFile_debugger_5fmessage_2eproto();

class Message;

enum Message_Function {
  Message_Function_glActiveTexture = 0,
  Message_Function_glAttachShader = 1,
  Message_Function_glBindAttribLocation = 2,
  Message_Function_glBindBuffer = 3,
  Message_Function_glBindFramebuffer = 4,
  Message_Function_glBindRenderbuffer = 5,
  Message_Function_glBindTexture = 6,
  Message_Function_glBlendColor = 7,
  Message_Function_glBlendEquation = 8,
  Message_Function_glBlendEquationSeparate = 9,
  Message_Function_glBlendFunc = 10,
  Message_Function_glBlendFuncSeparate = 11,
  Message_Function_glBufferData = 12,
  Message_Function_glBufferSubData = 13,
  Message_Function_glCheckFramebufferStatus = 14,
  Message_Function_glClear = 15,
  Message_Function_glClearColor = 16,
  Message_Function_glClearDepthf = 17,
  Message_Function_glClearStencil = 18,
  Message_Function_glColorMask = 19,
  Message_Function_glCompileShader = 20,
  Message_Function_glCompressedTexImage2D = 21,
  Message_Function_glCompressedTexSubImage2D = 22,
  Message_Function_glCopyTexImage2D = 23,
  Message_Function_glCopyTexSubImage2D = 24,
  Message_Function_glCreateProgram = 25,
  Message_Function_glCreateShader = 26,
  Message_Function_glCullFace = 27,
  Message_Function_glDeleteBuffers = 28,
  Message_Function_glDeleteFramebuffers = 29,
  Message_Function_glDeleteProgram = 30,
  Message_Function_glDeleteRenderbuffers = 31,
  Message_Function_glDeleteShader = 32,
  Message_Function_glDeleteTextures = 33,
  Message_Function_glDepthFunc = 34,
  Message_Function_glDepthMask = 35,
  Message_Function_glDepthRangef = 36,
  Message_Function_glDetachShader = 37,
  Message_Function_glDisable = 38,
  Message_Function_glDisableVertexAttribArray = 39,
  Message_Function_glDrawArrays = 40,
  Message_Function_glDrawElements = 41,
  Message_Function_glEnable = 42,
  Message_Function_glEnableVertexAttribArray = 43,
  Message_Function_glFinish = 44,
  Message_Function_glFlush = 45,
  Message_Function_glFramebufferRenderbuffer = 46,
  Message_Function_glFramebufferTexture2D = 47,
  Message_Function_glFrontFace = 48,
  Message_Function_glGenBuffers = 49,
  Message_Function_glGenerateMipmap = 50,
  Message_Function_glGenFramebuffers = 51,
  Message_Function_glGenRenderbuffers = 52,
  Message_Function_glGenTextures = 53,
  Message_Function_glGetActiveAttrib = 54,
  Message_Function_glGetActiveUniform = 55,
  Message_Function_glGetAttachedShaders = 56,
  Message_Function_glGetAttribLocation = 57,
  Message_Function_glGetBooleanv = 58,
  Message_Function_glGetBufferParameteriv = 59,
  Message_Function_glGetError = 60,
  Message_Function_glGetFloatv = 61,
  Message_Function_glGetFramebufferAttachmentParameteriv = 62,
  Message_Function_glGetIntegerv = 63,
  Message_Function_glGetProgramiv = 64,
  Message_Function_glGetProgramInfoLog = 65,
  Message_Function_glGetRenderbufferParameteriv = 66,
  Message_Function_glGetShaderiv = 67,
  Message_Function_glGetShaderInfoLog = 68,
  Message_Function_glGetShaderPrecisionFormat = 69,
  Message_Function_glGetShaderSource = 70,
  Message_Function_glGetString = 71,
  Message_Function_glGetTexParameterfv = 72,
  Message_Function_glGetTexParameteriv = 73,
  Message_Function_glGetUniformfv = 74,
  Message_Function_glGetUniformiv = 75,
  Message_Function_glGetUniformLocation = 76,
  Message_Function_glGetVertexAttribfv = 77,
  Message_Function_glGetVertexAttribiv = 78,
  Message_Function_glGetVertexAttribPointerv = 79,
  Message_Function_glHint = 80,
  Message_Function_glIsBuffer = 81,
  Message_Function_glIsEnabled = 82,
  Message_Function_glIsFramebuffer = 83,
  Message_Function_glIsProgram = 84,
  Message_Function_glIsRenderbuffer = 85,
  Message_Function_glIsShader = 86,
  Message_Function_glIsTexture = 87,
  Message_Function_glLineWidth = 88,
  Message_Function_glLinkProgram = 89,
  Message_Function_glPixelStorei = 90,
  Message_Function_glPolygonOffset = 91,
  Message_Function_glReadPixels = 92,
  Message_Function_glReleaseShaderCompiler = 93,
  Message_Function_glRenderbufferStorage = 94,
  Message_Function_glSampleCoverage = 95,
  Message_Function_glScissor = 96,
  Message_Function_glShaderBinary = 97,
  Message_Function_glShaderSource = 98,
  Message_Function_glStencilFunc = 99,
  Message_Function_glStencilFuncSeparate = 100,
  Message_Function_glStencilMask = 101,
  Message_Function_glStencilMaskSeparate = 102,
  Message_Function_glStencilOp = 103,
  Message_Function_glStencilOpSeparate = 104,
  Message_Function_glTexImage2D = 105,
  Message_Function_glTexParameterf = 106,
  Message_Function_glTexParameterfv = 107,
  Message_Function_glTexParameteri = 108,
  Message_Function_glTexParameteriv = 109,
  Message_Function_glTexSubImage2D = 110,
  Message_Function_glUniform1f = 111,
  Message_Function_glUniform1fv = 112,
  Message_Function_glUniform1i = 113,
  Message_Function_glUniform1iv = 114,
  Message_Function_glUniform2f = 115,
  Message_Function_glUniform2fv = 116,
  Message_Function_glUniform2i = 117,
  Message_Function_glUniform2iv = 118,
  Message_Function_glUniform3f = 119,
  Message_Function_glUniform3fv = 120,
  Message_Function_glUniform3i = 121,
  Message_Function_glUniform3iv = 122,
  Message_Function_glUniform4f = 123,
  Message_Function_glUniform4fv = 124,
  Message_Function_glUniform4i = 125,
  Message_Function_glUniform4iv = 126,
  Message_Function_glUniformMatrix2fv = 127,
  Message_Function_glUniformMatrix3fv = 128,
  Message_Function_glUniformMatrix4fv = 129,
  Message_Function_glUseProgram = 130,
  Message_Function_glValidateProgram = 131,
  Message_Function_glVertexAttrib1f = 132,
  Message_Function_glVertexAttrib1fv = 133,
  Message_Function_glVertexAttrib2f = 134,
  Message_Function_glVertexAttrib2fv = 135,
  Message_Function_glVertexAttrib3f = 136,
  Message_Function_glVertexAttrib3fv = 137,
  Message_Function_glVertexAttrib4f = 138,
  Message_Function_glVertexAttrib4fv = 139,
  Message_Function_glVertexAttribPointer = 140,
  Message_Function_glViewport = 141,
  Message_Function_eglGetDisplay = 142,
  Message_Function_eglInitialize = 143,
  Message_Function_eglTerminate = 144,
  Message_Function_eglGetConfigs = 145,
  Message_Function_eglChooseConfig = 146,
  Message_Function_eglGetConfigAttrib = 147,
  Message_Function_eglCreateWindowSurface = 148,
  Message_Function_eglCreatePixmapSurface = 149,
  Message_Function_eglCreatePbufferSurface = 150,
  Message_Function_eglDestroySurface = 151,
  Message_Function_eglQuerySurface = 152,
  Message_Function_eglCreateContext = 153,
  Message_Function_eglDestroyContext = 154,
  Message_Function_eglMakeCurrent = 155,
  Message_Function_eglGetCurrentContext = 156,
  Message_Function_eglGetCurrentSurface = 157,
  Message_Function_eglGetCurrentDisplay = 158,
  Message_Function_eglQueryContext = 159,
  Message_Function_eglWaitGL = 160,
  Message_Function_eglWaitNative = 161,
  Message_Function_eglSwapBuffers = 162,
  Message_Function_eglCopyBuffers = 163,
  Message_Function_eglGetError = 164,
  Message_Function_eglQueryString = 165,
  Message_Function_eglGetProcAddress = 166,
  Message_Function_eglSurfaceAttrib = 167,
  Message_Function_eglBindTexImage = 168,
  Message_Function_eglReleaseTexImage = 169,
  Message_Function_eglSwapInterval = 170,
  Message_Function_eglBindAPI = 171,
  Message_Function_eglQueryAPI = 172,
  Message_Function_eglWaitClient = 173,
  Message_Function_eglReleaseThread = 174,
  Message_Function_eglCreatePbufferFromClientBuffer = 175,
  Message_Function_eglLockSurfaceKHR = 176,
  Message_Function_eglUnlockSurfaceKHR = 177,
  Message_Function_eglCreateImageKHR = 178,
  Message_Function_eglDestroyImageKHR = 179,
  Message_Function_eglCreateSyncKHR = 180,
  Message_Function_eglDestroySyncKHR = 181,
  Message_Function_eglClientWaitSyncKHR = 182,
  Message_Function_eglGetSyncAttribKHR = 183,
  Message_Function_eglSetSwapRectangleANDROID = 184,
  Message_Function_eglGetRenderBufferANDROID = 185,
  Message_Function_ACK = 186,
  Message_Function_NEG = 187,
  Message_Function_CONTINUE = 188,
  Message_Function_SKIP = 189,
  Message_Function_SETPROP = 190
};
bool Message_Function_IsValid(int value);
const Message_Function Message_Function_Function_MIN = Message_Function_glActiveTexture;
const Message_Function Message_Function_Function_MAX = Message_Function_SETPROP;
const int Message_Function_Function_ARRAYSIZE = Message_Function_Function_MAX + 1;

enum Message_Type {
  Message_Type_BeforeCall = 0,
  Message_Type_AfterCall = 1,
  Message_Type_AfterGeneratedCall = 2,
  Message_Type_Response = 3,
  Message_Type_CompleteCall = 4
};
bool Message_Type_IsValid(int value);
const Message_Type Message_Type_Type_MIN = Message_Type_BeforeCall;
const Message_Type Message_Type_Type_MAX = Message_Type_CompleteCall;
const int Message_Type_Type_ARRAYSIZE = Message_Type_Type_MAX + 1;

enum Message_DataType {
  Message_DataType_ReferencedImage = 0,
  Message_DataType_NonreferencedImage = 1
};
bool Message_DataType_IsValid(int value);
const Message_DataType Message_DataType_DataType_MIN = Message_DataType_ReferencedImage;
const Message_DataType Message_DataType_DataType_MAX = Message_DataType_NonreferencedImage;
const int Message_DataType_DataType_ARRAYSIZE = Message_DataType_DataType_MAX + 1;

enum Message_Prop {
  Message_Prop_CaptureDraw = 0,
  Message_Prop_TimeMode = 1,
  Message_Prop_ExpectResponse = 2,
  Message_Prop_CaptureSwap = 3,
  Message_Prop_GLConstant = 4
};
bool Message_Prop_IsValid(int value);
const Message_Prop Message_Prop_Prop_MIN = Message_Prop_CaptureDraw;
const Message_Prop Message_Prop_Prop_MAX = Message_Prop_GLConstant;
const int Message_Prop_Prop_ARRAYSIZE = Message_Prop_Prop_MAX + 1;

// ===================================================================

class Message : public ::google::protobuf::MessageLite {
 public:
  Message();
  virtual ~Message();
  
  Message(const Message& from);
  
  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Message& default_instance();
  
  void Swap(Message* other);
  
  // implements Message ----------------------------------------------
  
  Message* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  typedef Message_Function Function;
  static const Function glActiveTexture = Message_Function_glActiveTexture;
  static const Function glAttachShader = Message_Function_glAttachShader;
  static const Function glBindAttribLocation = Message_Function_glBindAttribLocation;
  static const Function glBindBuffer = Message_Function_glBindBuffer;
  static const Function glBindFramebuffer = Message_Function_glBindFramebuffer;
  static const Function glBindRenderbuffer = Message_Function_glBindRenderbuffer;
  static const Function glBindTexture = Message_Function_glBindTexture;
  static const Function glBlendColor = Message_Function_glBlendColor;
  static const Function glBlendEquation = Message_Function_glBlendEquation;
  static const Function glBlendEquationSeparate = Message_Function_glBlendEquationSeparate;
  static const Function glBlendFunc = Message_Function_glBlendFunc;
  static const Function glBlendFuncSeparate = Message_Function_glBlendFuncSeparate;
  static const Function glBufferData = Message_Function_glBufferData;
  static const Function glBufferSubData = Message_Function_glBufferSubData;
  static const Function glCheckFramebufferStatus = Message_Function_glCheckFramebufferStatus;
  static const Function glClear = Message_Function_glClear;
  static const Function glClearColor = Message_Function_glClearColor;
  static const Function glClearDepthf = Message_Function_glClearDepthf;
  static const Function glClearStencil = Message_Function_glClearStencil;
  static const Function glColorMask = Message_Function_glColorMask;
  static const Function glCompileShader = Message_Function_glCompileShader;
  static const Function glCompressedTexImage2D = Message_Function_glCompressedTexImage2D;
  static const Function glCompressedTexSubImage2D = Message_Function_glCompressedTexSubImage2D;
  static const Function glCopyTexImage2D = Message_Function_glCopyTexImage2D;
  static const Function glCopyTexSubImage2D = Message_Function_glCopyTexSubImage2D;
  static const Function glCreateProgram = Message_Function_glCreateProgram;
  static const Function glCreateShader = Message_Function_glCreateShader;
  static const Function glCullFace = Message_Function_glCullFace;
  static const Function glDeleteBuffers = Message_Function_glDeleteBuffers;
  static const Function glDeleteFramebuffers = Message_Function_glDeleteFramebuffers;
  static const Function glDeleteProgram = Message_Function_glDeleteProgram;
  static const Function glDeleteRenderbuffers = Message_Function_glDeleteRenderbuffers;
  static const Function glDeleteShader = Message_Function_glDeleteShader;
  static const Function glDeleteTextures = Message_Function_glDeleteTextures;
  static const Function glDepthFunc = Message_Function_glDepthFunc;
  static const Function glDepthMask = Message_Function_glDepthMask;
  static const Function glDepthRangef = Message_Function_glDepthRangef;
  static const Function glDetachShader = Message_Function_glDetachShader;
  static const Function glDisable = Message_Function_glDisable;
  static const Function glDisableVertexAttribArray = Message_Function_glDisableVertexAttribArray;
  static const Function glDrawArrays = Message_Function_glDrawArrays;
  static const Function glDrawElements = Message_Function_glDrawElements;
  static const Function glEnable = Message_Function_glEnable;
  static const Function glEnableVertexAttribArray = Message_Function_glEnableVertexAttribArray;
  static const Function glFinish = Message_Function_glFinish;
  static const Function glFlush = Message_Function_glFlush;
  static const Function glFramebufferRenderbuffer = Message_Function_glFramebufferRenderbuffer;
  static const Function glFramebufferTexture2D = Message_Function_glFramebufferTexture2D;
  static const Function glFrontFace = Message_Function_glFrontFace;
  static const Function glGenBuffers = Message_Function_glGenBuffers;
  static const Function glGenerateMipmap = Message_Function_glGenerateMipmap;
  static const Function glGenFramebuffers = Message_Function_glGenFramebuffers;
  static const Function glGenRenderbuffers = Message_Function_glGenRenderbuffers;
  static const Function glGenTextures = Message_Function_glGenTextures;
  static const Function glGetActiveAttrib = Message_Function_glGetActiveAttrib;
  static const Function glGetActiveUniform = Message_Function_glGetActiveUniform;
  static const Function glGetAttachedShaders = Message_Function_glGetAttachedShaders;
  static const Function glGetAttribLocation = Message_Function_glGetAttribLocation;
  static const Function glGetBooleanv = Message_Function_glGetBooleanv;
  static const Function glGetBufferParameteriv = Message_Function_glGetBufferParameteriv;
  static const Function glGetError = Message_Function_glGetError;
  static const Function glGetFloatv = Message_Function_glGetFloatv;
  static const Function glGetFramebufferAttachmentParameteriv = Message_Function_glGetFramebufferAttachmentParameteriv;
  static const Function glGetIntegerv = Message_Function_glGetIntegerv;
  static const Function glGetProgramiv = Message_Function_glGetProgramiv;
  static const Function glGetProgramInfoLog = Message_Function_glGetProgramInfoLog;
  static const Function glGetRenderbufferParameteriv = Message_Function_glGetRenderbufferParameteriv;
  static const Function glGetShaderiv = Message_Function_glGetShaderiv;
  static const Function glGetShaderInfoLog = Message_Function_glGetShaderInfoLog;
  static const Function glGetShaderPrecisionFormat = Message_Function_glGetShaderPrecisionFormat;
  static const Function glGetShaderSource = Message_Function_glGetShaderSource;
  static const Function glGetString = Message_Function_glGetString;
  static const Function glGetTexParameterfv = Message_Function_glGetTexParameterfv;
  static const Function glGetTexParameteriv = Message_Function_glGetTexParameteriv;
  static const Function glGetUniformfv = Message_Function_glGetUniformfv;
  static const Function glGetUniformiv = Message_Function_glGetUniformiv;
  static const Function glGetUniformLocation = Message_Function_glGetUniformLocation;
  static const Function glGetVertexAttribfv = Message_Function_glGetVertexAttribfv;
  static const Function glGetVertexAttribiv = Message_Function_glGetVertexAttribiv;
  static const Function glGetVertexAttribPointerv = Message_Function_glGetVertexAttribPointerv;
  static const Function glHint = Message_Function_glHint;
  static const Function glIsBuffer = Message_Function_glIsBuffer;
  static const Function glIsEnabled = Message_Function_glIsEnabled;
  static const Function glIsFramebuffer = Message_Function_glIsFramebuffer;
  static const Function glIsProgram = Message_Function_glIsProgram;
  static const Function glIsRenderbuffer = Message_Function_glIsRenderbuffer;
  static const Function glIsShader = Message_Function_glIsShader;
  static const Function glIsTexture = Message_Function_glIsTexture;
  static const Function glLineWidth = Message_Function_glLineWidth;
  static const Function glLinkProgram = Message_Function_glLinkProgram;
  static const Function glPixelStorei = Message_Function_glPixelStorei;
  static const Function glPolygonOffset = Message_Function_glPolygonOffset;
  static const Function glReadPixels = Message_Function_glReadPixels;
  static const Function glReleaseShaderCompiler = Message_Function_glReleaseShaderCompiler;
  static const Function glRenderbufferStorage = Message_Function_glRenderbufferStorage;
  static const Function glSampleCoverage = Message_Function_glSampleCoverage;
  static const Function glScissor = Message_Function_glScissor;
  static const Function glShaderBinary = Message_Function_glShaderBinary;
  static const Function glShaderSource = Message_Function_glShaderSource;
  static const Function glStencilFunc = Message_Function_glStencilFunc;
  static const Function glStencilFuncSeparate = Message_Function_glStencilFuncSeparate;
  static const Function glStencilMask = Message_Function_glStencilMask;
  static const Function glStencilMaskSeparate = Message_Function_glStencilMaskSeparate;
  static const Function glStencilOp = Message_Function_glStencilOp;
  static const Function glStencilOpSeparate = Message_Function_glStencilOpSeparate;
  static const Function glTexImage2D = Message_Function_glTexImage2D;
  static const Function glTexParameterf = Message_Function_glTexParameterf;
  static const Function glTexParameterfv = Message_Function_glTexParameterfv;
  static const Function glTexParameteri = Message_Function_glTexParameteri;
  static const Function glTexParameteriv = Message_Function_glTexParameteriv;
  static const Function glTexSubImage2D = Message_Function_glTexSubImage2D;
  static const Function glUniform1f = Message_Function_glUniform1f;
  static const Function glUniform1fv = Message_Function_glUniform1fv;
  static const Function glUniform1i = Message_Function_glUniform1i;
  static const Function glUniform1iv = Message_Function_glUniform1iv;
  static const Function glUniform2f = Message_Function_glUniform2f;
  static const Function glUniform2fv = Message_Function_glUniform2fv;
  static const Function glUniform2i = Message_Function_glUniform2i;
  static const Function glUniform2iv = Message_Function_glUniform2iv;
  static const Function glUniform3f = Message_Function_glUniform3f;
  static const Function glUniform3fv = Message_Function_glUniform3fv;
  static const Function glUniform3i = Message_Function_glUniform3i;
  static const Function glUniform3iv = Message_Function_glUniform3iv;
  static const Function glUniform4f = Message_Function_glUniform4f;
  static const Function glUniform4fv = Message_Function_glUniform4fv;
  static const Function glUniform4i = Message_Function_glUniform4i;
  static const Function glUniform4iv = Message_Function_glUniform4iv;
  static const Function glUniformMatrix2fv = Message_Function_glUniformMatrix2fv;
  static const Function glUniformMatrix3fv = Message_Function_glUniformMatrix3fv;
  static const Function glUniformMatrix4fv = Message_Function_glUniformMatrix4fv;
  static const Function glUseProgram = Message_Function_glUseProgram;
  static const Function glValidateProgram = Message_Function_glValidateProgram;
  static const Function glVertexAttrib1f = Message_Function_glVertexAttrib1f;
  static const Function glVertexAttrib1fv = Message_Function_glVertexAttrib1fv;
  static const Function glVertexAttrib2f = Message_Function_glVertexAttrib2f;
  static const Function glVertexAttrib2fv = Message_Function_glVertexAttrib2fv;
  static const Function glVertexAttrib3f = Message_Function_glVertexAttrib3f;
  static const Function glVertexAttrib3fv = Message_Function_glVertexAttrib3fv;
  static const Function glVertexAttrib4f = Message_Function_glVertexAttrib4f;
  static const Function glVertexAttrib4fv = Message_Function_glVertexAttrib4fv;
  static const Function glVertexAttribPointer = Message_Function_glVertexAttribPointer;
  static const Function glViewport = Message_Function_glViewport;
  static const Function eglGetDisplay = Message_Function_eglGetDisplay;
  static const Function eglInitialize = Message_Function_eglInitialize;
  static const Function eglTerminate = Message_Function_eglTerminate;
  static const Function eglGetConfigs = Message_Function_eglGetConfigs;
  static const Function eglChooseConfig = Message_Function_eglChooseConfig;
  static const Function eglGetConfigAttrib = Message_Function_eglGetConfigAttrib;
  static const Function eglCreateWindowSurface = Message_Function_eglCreateWindowSurface;
  static const Function eglCreatePixmapSurface = Message_Function_eglCreatePixmapSurface;
  static const Function eglCreatePbufferSurface = Message_Function_eglCreatePbufferSurface;
  static const Function eglDestroySurface = Message_Function_eglDestroySurface;
  static const Function eglQuerySurface = Message_Function_eglQuerySurface;
  static const Function eglCreateContext = Message_Function_eglCreateContext;
  static const Function eglDestroyContext = Message_Function_eglDestroyContext;
  static const Function eglMakeCurrent = Message_Function_eglMakeCurrent;
  static const Function eglGetCurrentContext = Message_Function_eglGetCurrentContext;
  static const Function eglGetCurrentSurface = Message_Function_eglGetCurrentSurface;
  static const Function eglGetCurrentDisplay = Message_Function_eglGetCurrentDisplay;
  static const Function eglQueryContext = Message_Function_eglQueryContext;
  static const Function eglWaitGL = Message_Function_eglWaitGL;
  static const Function eglWaitNative = Message_Function_eglWaitNative;
  static const Function eglSwapBuffers = Message_Function_eglSwapBuffers;
  static const Function eglCopyBuffers = Message_Function_eglCopyBuffers;
  static const Function eglGetError = Message_Function_eglGetError;
  static const Function eglQueryString = Message_Function_eglQueryString;
  static const Function eglGetProcAddress = Message_Function_eglGetProcAddress;
  static const Function eglSurfaceAttrib = Message_Function_eglSurfaceAttrib;
  static const Function eglBindTexImage = Message_Function_eglBindTexImage;
  static const Function eglReleaseTexImage = Message_Function_eglReleaseTexImage;
  static const Function eglSwapInterval = Message_Function_eglSwapInterval;
  static const Function eglBindAPI = Message_Function_eglBindAPI;
  static const Function eglQueryAPI = Message_Function_eglQueryAPI;
  static const Function eglWaitClient = Message_Function_eglWaitClient;
  static const Function eglReleaseThread = Message_Function_eglReleaseThread;
  static const Function eglCreatePbufferFromClientBuffer = Message_Function_eglCreatePbufferFromClientBuffer;
  static const Function eglLockSurfaceKHR = Message_Function_eglLockSurfaceKHR;
  static const Function eglUnlockSurfaceKHR = Message_Function_eglUnlockSurfaceKHR;
  static const Function eglCreateImageKHR = Message_Function_eglCreateImageKHR;
  static const Function eglDestroyImageKHR = Message_Function_eglDestroyImageKHR;
  static const Function eglCreateSyncKHR = Message_Function_eglCreateSyncKHR;
  static const Function eglDestroySyncKHR = Message_Function_eglDestroySyncKHR;
  static const Function eglClientWaitSyncKHR = Message_Function_eglClientWaitSyncKHR;
  static const Function eglGetSyncAttribKHR = Message_Function_eglGetSyncAttribKHR;
  static const Function eglSetSwapRectangleANDROID = Message_Function_eglSetSwapRectangleANDROID;
  static const Function eglGetRenderBufferANDROID = Message_Function_eglGetRenderBufferANDROID;
  static const Function ACK = Message_Function_ACK;
  static const Function NEG = Message_Function_NEG;
  static const Function CONTINUE = Message_Function_CONTINUE;
  static const Function SKIP = Message_Function_SKIP;
  static const Function SETPROP = Message_Function_SETPROP;
  static inline bool Function_IsValid(int value) {
    return Message_Function_IsValid(value);
  }
  static const Function Function_MIN =
    Message_Function_Function_MIN;
  static const Function Function_MAX =
    Message_Function_Function_MAX;
  static const int Function_ARRAYSIZE =
    Message_Function_Function_ARRAYSIZE;
  
  typedef Message_Type Type;
  static const Type BeforeCall = Message_Type_BeforeCall;
  static const Type AfterCall = Message_Type_AfterCall;
  static const Type AfterGeneratedCall = Message_Type_AfterGeneratedCall;
  static const Type Response = Message_Type_Response;
  static const Type CompleteCall = Message_Type_CompleteCall;
  static inline bool Type_IsValid(int value) {
    return Message_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Message_Type_Type_MIN;
  static const Type Type_MAX =
    Message_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Message_Type_Type_ARRAYSIZE;
  
  typedef Message_DataType DataType;
  static const DataType ReferencedImage = Message_DataType_ReferencedImage;
  static const DataType NonreferencedImage = Message_DataType_NonreferencedImage;
  static inline bool DataType_IsValid(int value) {
    return Message_DataType_IsValid(value);
  }
  static const DataType DataType_MIN =
    Message_DataType_DataType_MIN;
  static const DataType DataType_MAX =
    Message_DataType_DataType_MAX;
  static const int DataType_ARRAYSIZE =
    Message_DataType_DataType_ARRAYSIZE;
  
  typedef Message_Prop Prop;
  static const Prop CaptureDraw = Message_Prop_CaptureDraw;
  static const Prop TimeMode = Message_Prop_TimeMode;
  static const Prop ExpectResponse = Message_Prop_ExpectResponse;
  static const Prop CaptureSwap = Message_Prop_CaptureSwap;
  static const Prop GLConstant = Message_Prop_GLConstant;
  static inline bool Prop_IsValid(int value) {
    return Message_Prop_IsValid(value);
  }
  static const Prop Prop_MIN =
    Message_Prop_Prop_MIN;
  static const Prop Prop_MAX =
    Message_Prop_Prop_MAX;
  static const int Prop_ARRAYSIZE =
    Message_Prop_Prop_ARRAYSIZE;
  
  // accessors -------------------------------------------------------
  
  // required int32 context_id = 1;
  inline bool has_context_id() const;
  inline void clear_context_id();
  static const int kContextIdFieldNumber = 1;
  inline ::google::protobuf::int32 context_id() const;
  inline void set_context_id(::google::protobuf::int32 value);
  
  // required .com.android.glesv2debugger.Message.Function function = 2 [default = NEG];
  inline bool has_function() const;
  inline void clear_function();
  static const int kFunctionFieldNumber = 2;
  inline ::com::android::glesv2debugger::Message_Function function() const;
  inline void set_function(::com::android::glesv2debugger::Message_Function value);
  
  // required .com.android.glesv2debugger.Message.Type type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::com::android::glesv2debugger::Message_Type type() const;
  inline void set_type(::com::android::glesv2debugger::Message_Type value);
  
  // required bool expect_response = 4;
  inline bool has_expect_response() const;
  inline void clear_expect_response();
  static const int kExpectResponseFieldNumber = 4;
  inline bool expect_response() const;
  inline void set_expect_response(bool value);
  
  // optional int32 ret = 5;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 5;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);
  
  // optional int32 arg0 = 6;
  inline bool has_arg0() const;
  inline void clear_arg0();
  static const int kArg0FieldNumber = 6;
  inline ::google::protobuf::int32 arg0() const;
  inline void set_arg0(::google::protobuf::int32 value);
  
  // optional int32 arg1 = 7;
  inline bool has_arg1() const;
  inline void clear_arg1();
  static const int kArg1FieldNumber = 7;
  inline ::google::protobuf::int32 arg1() const;
  inline void set_arg1(::google::protobuf::int32 value);
  
  // optional int32 arg2 = 8;
  inline bool has_arg2() const;
  inline void clear_arg2();
  static const int kArg2FieldNumber = 8;
  inline ::google::protobuf::int32 arg2() const;
  inline void set_arg2(::google::protobuf::int32 value);
  
  // optional int32 arg3 = 9;
  inline bool has_arg3() const;
  inline void clear_arg3();
  static const int kArg3FieldNumber = 9;
  inline ::google::protobuf::int32 arg3() const;
  inline void set_arg3(::google::protobuf::int32 value);
  
  // optional int32 arg4 = 16;
  inline bool has_arg4() const;
  inline void clear_arg4();
  static const int kArg4FieldNumber = 16;
  inline ::google::protobuf::int32 arg4() const;
  inline void set_arg4(::google::protobuf::int32 value);
  
  // optional int32 arg5 = 17;
  inline bool has_arg5() const;
  inline void clear_arg5();
  static const int kArg5FieldNumber = 17;
  inline ::google::protobuf::int32 arg5() const;
  inline void set_arg5(::google::protobuf::int32 value);
  
  // optional int32 arg6 = 18;
  inline bool has_arg6() const;
  inline void clear_arg6();
  static const int kArg6FieldNumber = 18;
  inline ::google::protobuf::int32 arg6() const;
  inline void set_arg6(::google::protobuf::int32 value);
  
  // optional int32 arg7 = 19;
  inline bool has_arg7() const;
  inline void clear_arg7();
  static const int kArg7FieldNumber = 19;
  inline ::google::protobuf::int32 arg7() const;
  inline void set_arg7(::google::protobuf::int32 value);
  
  // optional int32 arg8 = 20;
  inline bool has_arg8() const;
  inline void clear_arg8();
  static const int kArg8FieldNumber = 20;
  inline ::google::protobuf::int32 arg8() const;
  inline void set_arg8(::google::protobuf::int32 value);
  
  // optional bytes data = 10;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 10;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  
  // optional .com.android.glesv2debugger.Message.DataType data_type = 23;
  inline bool has_data_type() const;
  inline void clear_data_type();
  static const int kDataTypeFieldNumber = 23;
  inline ::com::android::glesv2debugger::Message_DataType data_type() const;
  inline void set_data_type(::com::android::glesv2debugger::Message_DataType value);
  
  // optional int32 pixel_format = 24;
  inline bool has_pixel_format() const;
  inline void clear_pixel_format();
  static const int kPixelFormatFieldNumber = 24;
  inline ::google::protobuf::int32 pixel_format() const;
  inline void set_pixel_format(::google::protobuf::int32 value);
  
  // optional int32 pixel_type = 25;
  inline bool has_pixel_type() const;
  inline void clear_pixel_type();
  static const int kPixelTypeFieldNumber = 25;
  inline ::google::protobuf::int32 pixel_type() const;
  inline void set_pixel_type(::google::protobuf::int32 value);
  
  // optional int32 image_width = 26;
  inline bool has_image_width() const;
  inline void clear_image_width();
  static const int kImageWidthFieldNumber = 26;
  inline ::google::protobuf::int32 image_width() const;
  inline void set_image_width(::google::protobuf::int32 value);
  
  // optional int32 image_height = 27;
  inline bool has_image_height() const;
  inline void clear_image_height();
  static const int kImageHeightFieldNumber = 27;
  inline ::google::protobuf::int32 image_height() const;
  inline void set_image_height(::google::protobuf::int32 value);
  
  // optional float time = 11;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 11;
  inline float time() const;
  inline void set_time(float value);
  
  // optional .com.android.glesv2debugger.Message.Prop prop = 21;
  inline bool has_prop() const;
  inline void clear_prop();
  static const int kPropFieldNumber = 21;
  inline ::com::android::glesv2debugger::Message_Prop prop() const;
  inline void set_prop(::com::android::glesv2debugger::Message_Prop value);
  
  // optional float clock = 22;
  inline bool has_clock() const;
  inline void clear_clock();
  static const int kClockFieldNumber = 22;
  inline float clock() const;
  inline void set_clock(float value);
  
  // @@protoc_insertion_point(class_scope:com.android.glesv2debugger.Message)
 private:
  mutable int _cached_size_;
  
  ::google::protobuf::int32 context_id_;
  int function_;
  int type_;
  bool expect_response_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 arg0_;
  ::google::protobuf::int32 arg1_;
  ::google::protobuf::int32 arg2_;
  ::google::protobuf::int32 arg3_;
  ::google::protobuf::int32 arg4_;
  ::google::protobuf::int32 arg5_;
  ::google::protobuf::int32 arg6_;
  ::google::protobuf::int32 arg7_;
  ::google::protobuf::int32 arg8_;
  ::std::string* data_;
  static const ::std::string _default_data_;
  int data_type_;
  ::google::protobuf::int32 pixel_format_;
  ::google::protobuf::int32 pixel_type_;
  ::google::protobuf::int32 image_width_;
  ::google::protobuf::int32 image_height_;
  float time_;
  int prop_;
  float clock_;
  friend void  protobuf_AddDesc_debugger_5fmessage_2eproto();
  friend void protobuf_AssignDesc_debugger_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_debugger_5fmessage_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// ===================================================================


// ===================================================================

// Message

// required int32 context_id = 1;
inline bool Message::has_context_id() const {
  return _has_bit(0);
}
inline void Message::clear_context_id() {
  context_id_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 Message::context_id() const {
  return context_id_;
}
inline void Message::set_context_id(::google::protobuf::int32 value) {
  _set_bit(0);
  context_id_ = value;
}

// required .com.android.glesv2debugger.Message.Function function = 2 [default = NEG];
inline bool Message::has_function() const {
  return _has_bit(1);
}
inline void Message::clear_function() {
  function_ = 187;
  _clear_bit(1);
}
inline ::com::android::glesv2debugger::Message_Function Message::function() const {
  return static_cast< ::com::android::glesv2debugger::Message_Function >(function_);
}
inline void Message::set_function(::com::android::glesv2debugger::Message_Function value) {
  GOOGLE_DCHECK(::com::android::glesv2debugger::Message_Function_IsValid(value));
  _set_bit(1);
  function_ = value;
}

// required .com.android.glesv2debugger.Message.Type type = 3;
inline bool Message::has_type() const {
  return _has_bit(2);
}
inline void Message::clear_type() {
  type_ = 0;
  _clear_bit(2);
}
inline ::com::android::glesv2debugger::Message_Type Message::type() const {
  return static_cast< ::com::android::glesv2debugger::Message_Type >(type_);
}
inline void Message::set_type(::com::android::glesv2debugger::Message_Type value) {
  GOOGLE_DCHECK(::com::android::glesv2debugger::Message_Type_IsValid(value));
  _set_bit(2);
  type_ = value;
}

// required bool expect_response = 4;
inline bool Message::has_expect_response() const {
  return _has_bit(3);
}
inline void Message::clear_expect_response() {
  expect_response_ = false;
  _clear_bit(3);
}
inline bool Message::expect_response() const {
  return expect_response_;
}
inline void Message::set_expect_response(bool value) {
  _set_bit(3);
  expect_response_ = value;
}

// optional int32 ret = 5;
inline bool Message::has_ret() const {
  return _has_bit(4);
}
inline void Message::clear_ret() {
  ret_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 Message::ret() const {
  return ret_;
}
inline void Message::set_ret(::google::protobuf::int32 value) {
  _set_bit(4);
  ret_ = value;
}

// optional int32 arg0 = 6;
inline bool Message::has_arg0() const {
  return _has_bit(5);
}
inline void Message::clear_arg0() {
  arg0_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 Message::arg0() const {
  return arg0_;
}
inline void Message::set_arg0(::google::protobuf::int32 value) {
  _set_bit(5);
  arg0_ = value;
}

// optional int32 arg1 = 7;
inline bool Message::has_arg1() const {
  return _has_bit(6);
}
inline void Message::clear_arg1() {
  arg1_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 Message::arg1() const {
  return arg1_;
}
inline void Message::set_arg1(::google::protobuf::int32 value) {
  _set_bit(6);
  arg1_ = value;
}

// optional int32 arg2 = 8;
inline bool Message::has_arg2() const {
  return _has_bit(7);
}
inline void Message::clear_arg2() {
  arg2_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 Message::arg2() const {
  return arg2_;
}
inline void Message::set_arg2(::google::protobuf::int32 value) {
  _set_bit(7);
  arg2_ = value;
}

// optional int32 arg3 = 9;
inline bool Message::has_arg3() const {
  return _has_bit(8);
}
inline void Message::clear_arg3() {
  arg3_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 Message::arg3() const {
  return arg3_;
}
inline void Message::set_arg3(::google::protobuf::int32 value) {
  _set_bit(8);
  arg3_ = value;
}

// optional int32 arg4 = 16;
inline bool Message::has_arg4() const {
  return _has_bit(9);
}
inline void Message::clear_arg4() {
  arg4_ = 0;
  _clear_bit(9);
}
inline ::google::protobuf::int32 Message::arg4() const {
  return arg4_;
}
inline void Message::set_arg4(::google::protobuf::int32 value) {
  _set_bit(9);
  arg4_ = value;
}

// optional int32 arg5 = 17;
inline bool Message::has_arg5() const {
  return _has_bit(10);
}
inline void Message::clear_arg5() {
  arg5_ = 0;
  _clear_bit(10);
}
inline ::google::protobuf::int32 Message::arg5() const {
  return arg5_;
}
inline void Message::set_arg5(::google::protobuf::int32 value) {
  _set_bit(10);
  arg5_ = value;
}

// optional int32 arg6 = 18;
inline bool Message::has_arg6() const {
  return _has_bit(11);
}
inline void Message::clear_arg6() {
  arg6_ = 0;
  _clear_bit(11);
}
inline ::google::protobuf::int32 Message::arg6() const {
  return arg6_;
}
inline void Message::set_arg6(::google::protobuf::int32 value) {
  _set_bit(11);
  arg6_ = value;
}

// optional int32 arg7 = 19;
inline bool Message::has_arg7() const {
  return _has_bit(12);
}
inline void Message::clear_arg7() {
  arg7_ = 0;
  _clear_bit(12);
}
inline ::google::protobuf::int32 Message::arg7() const {
  return arg7_;
}
inline void Message::set_arg7(::google::protobuf::int32 value) {
  _set_bit(12);
  arg7_ = value;
}

// optional int32 arg8 = 20;
inline bool Message::has_arg8() const {
  return _has_bit(13);
}
inline void Message::clear_arg8() {
  arg8_ = 0;
  _clear_bit(13);
}
inline ::google::protobuf::int32 Message::arg8() const {
  return arg8_;
}
inline void Message::set_arg8(::google::protobuf::int32 value) {
  _set_bit(13);
  arg8_ = value;
}

// optional bytes data = 10;
inline bool Message::has_data() const {
  return _has_bit(14);
}
inline void Message::clear_data() {
  if (data_ != &_default_data_) {
    data_->clear();
  }
  _clear_bit(14);
}
inline const ::std::string& Message::data() const {
  return *data_;
}
inline void Message::set_data(const ::std::string& value) {
  _set_bit(14);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Message::set_data(const char* value) {
  _set_bit(14);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Message::set_data(const void* value, size_t size) {
  _set_bit(14);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message::mutable_data() {
  _set_bit(14);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  return data_;
}

// optional .com.android.glesv2debugger.Message.DataType data_type = 23;
inline bool Message::has_data_type() const {
  return _has_bit(15);
}
inline void Message::clear_data_type() {
  data_type_ = 0;
  _clear_bit(15);
}
inline ::com::android::glesv2debugger::Message_DataType Message::data_type() const {
  return static_cast< ::com::android::glesv2debugger::Message_DataType >(data_type_);
}
inline void Message::set_data_type(::com::android::glesv2debugger::Message_DataType value) {
  GOOGLE_DCHECK(::com::android::glesv2debugger::Message_DataType_IsValid(value));
  _set_bit(15);
  data_type_ = value;
}

// optional int32 pixel_format = 24;
inline bool Message::has_pixel_format() const {
  return _has_bit(16);
}
inline void Message::clear_pixel_format() {
  pixel_format_ = 0;
  _clear_bit(16);
}
inline ::google::protobuf::int32 Message::pixel_format() const {
  return pixel_format_;
}
inline void Message::set_pixel_format(::google::protobuf::int32 value) {
  _set_bit(16);
  pixel_format_ = value;
}

// optional int32 pixel_type = 25;
inline bool Message::has_pixel_type() const {
  return _has_bit(17);
}
inline void Message::clear_pixel_type() {
  pixel_type_ = 0;
  _clear_bit(17);
}
inline ::google::protobuf::int32 Message::pixel_type() const {
  return pixel_type_;
}
inline void Message::set_pixel_type(::google::protobuf::int32 value) {
  _set_bit(17);
  pixel_type_ = value;
}

// optional int32 image_width = 26;
inline bool Message::has_image_width() const {
  return _has_bit(18);
}
inline void Message::clear_image_width() {
  image_width_ = 0;
  _clear_bit(18);
}
inline ::google::protobuf::int32 Message::image_width() const {
  return image_width_;
}
inline void Message::set_image_width(::google::protobuf::int32 value) {
  _set_bit(18);
  image_width_ = value;
}

// optional int32 image_height = 27;
inline bool Message::has_image_height() const {
  return _has_bit(19);
}
inline void Message::clear_image_height() {
  image_height_ = 0;
  _clear_bit(19);
}
inline ::google::protobuf::int32 Message::image_height() const {
  return image_height_;
}
inline void Message::set_image_height(::google::protobuf::int32 value) {
  _set_bit(19);
  image_height_ = value;
}

// optional float time = 11;
inline bool Message::has_time() const {
  return _has_bit(20);
}
inline void Message::clear_time() {
  time_ = 0;
  _clear_bit(20);
}
inline float Message::time() const {
  return time_;
}
inline void Message::set_time(float value) {
  _set_bit(20);
  time_ = value;
}

// optional .com.android.glesv2debugger.Message.Prop prop = 21;
inline bool Message::has_prop() const {
  return _has_bit(21);
}
inline void Message::clear_prop() {
  prop_ = 0;
  _clear_bit(21);
}
inline ::com::android::glesv2debugger::Message_Prop Message::prop() const {
  return static_cast< ::com::android::glesv2debugger::Message_Prop >(prop_);
}
inline void Message::set_prop(::com::android::glesv2debugger::Message_Prop value) {
  GOOGLE_DCHECK(::com::android::glesv2debugger::Message_Prop_IsValid(value));
  _set_bit(21);
  prop_ = value;
}

// optional float clock = 22;
inline bool Message::has_clock() const {
  return _has_bit(22);
}
inline void Message::clear_clock() {
  clock_ = 0;
  _clear_bit(22);
}
inline float Message::clock() const {
  return clock_;
}
inline void Message::set_clock(float value) {
  _set_bit(22);
  clock_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace glesv2debugger
}  // namespace android
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_debugger_5fmessage_2eproto__INCLUDED
