page.title=Eclipse 内で ADT を使用
@jd:body

<div id="qv-wrapper">
  <div id="qv">
  <h2>このドキュメントの内容</h2>
  <ol>
    <li><a href="#CreatingAProject">Android プロジェクトの作成</a></li>
    <li><a href="#Running">アプリケーションの実行</a>
  <ol>
 <li><a href="#CreatingAnAvd">AVD の作成</a></li>
 <li><a href="#RunningAnApplication">アプリケーションの実行</a></li>
  </ol>
    </li>
    <li><a href="#RunConfig">カスタム起動構成の作成</a></li>
    <li><a href="#Signing">アプリケーションの署名設定</a></li>
    <li><a href="#Tips">Eclipse のヒント</a></li>
  </div>
</div>


<p>「Android Development Tools (ADT) plugin for Eclipse」は、Eclipse 統合開発環境に強力な拡張機能を追加します。拡張機能により、Android アプリケーションの作成とデバッグが容易になります。Eclipse を使用している場合、ADT プラグインを組み込むことで、Android アプリケーションを驚くほど効率よく開発できるようになります:</p>

<ul>
  <li>Eclipse 総合開発環境内から、他の Android 開発ツールにもアクセスできます。たとえば ADT では、DDMS ツールの多くの機能が利用できます。Eclipse からスクリーンショットの撮影、ポート転送の管理、ブレークポイントの設定、スレッドやプロセスの情報の表示を直接行うことが可能です。</li>
  <li>Android 開発用の新たなプロジェクト ウィザードが追加されます。それを使用して、新しい Android アプリケーションに必要な基本ファイルをすべて簡単に作成してセットアップできます。</li>
  <li>Android アプリケーションのビルド プロセスを自動化と単純化できます。</li>
  <li>同梱の Android コード エディタを使用して、Android のマニフェスト ファイルとリソース ファイルの適切な XML をスムーズに作成できます。</li>
  <li>プロジェクトを、ユーザーに配布可能な署名済みの APK 形式でエクスポートすることもできます。</li>
</ul>

<p>ADT を組み込んだ Eclipse 総合開発環境で Android アプリケーションの開発を始めるには、最初に Eclipse 総合開発環境をダウンロードしてから、ADT プラグインをダウンロードしてインストールする必要があります。そのためには、<a href="{@docRoot}sdk/eclipse-adt.html#installing">Eclipse 用 ADT プラグインのインストール</a>に記載されている手順どおりに操作します。</p>
<p>バージョン 0.9 より前の ADT を使用してアプリケーションを既に開発中の場合は、必ず最新バージョンにアップグレードしてから続行してください。<a href="{@docRoot}sdk/eclipse-adt.html#updating">Eclipse ADT プラグインをアップデート</a>するためのガイドをご覧ください。</p>
<p class="note"><strong>注:</strong> このガイドでは、ADT プラグインの最新バージョンを使用していることを前提としています。説明の大半は、以前のバージョンにも当てはまりますが、以前のバージョンを使用している場合は、このドキュメントのオンライン版ではなく、SDK パッケージに付属された資料内の同ドキュメントをご覧ください。</p>


<h2  id="CreatingAProject">Android プロジェクトの作成</h2>

<p>ADT プラグインが提供する新規プロジェクト ウィザードを使用すると、簡単に Android プロジェクトを新規作成（または既存のコードから作成）できるようになります。新しいプロジェクトを作成するには: </p>

<ol>
  <li>[<strong>ファイル（File）</strong>] &gt; [<strong>新規（New）</strong>] &gt; [<strong>プロジェクト（Project）</strong>] を選択します。</li>
  <li>[<strong>Android</strong>] &gt; [<strong>Android プロジェクト（Android Project）</strong>] を選択し、[<strong>次へ（Next）</strong>] をクリックします。</li>
  <li>プロジェクトの内容を選択します:
    <ul>
  <li>プロジェクト名を入力します。<em></em>これはそのプロジェクトが作成されるフォルダの名前になります。</li>  <li>[内容（Contents）] セクションで、[<strong>ワークスペース内に新規プロジェクトを作成（Create new project in workspace</strong>] を選択します。プロジェクト ワークスペースのロケーションを選択します。</li>
  <li>[ターゲット（Target）] タブで、プロジェクトの [ビルド ターゲット（Build Target）] として使用する Android ターゲットを選択します。このビルド ターゲットは、アプリケーションをビルドする Android プラットフォームを指定します。
 <p>最新の SDK に導入されている新しい API を使用することがわかっている場合を除き、Android 1.1 などの最も古いバージョンのターゲット (Target Name) を選択してください。</p>
 <p class="note"><strong>注:</strong> プロジェクトのビルド ターゲットはいつでも変更できます。変更するには、[パッケージ エクスプローラー（Package Explorer）] でプロジェクトを右クリックし、[<strong>プロパティ（Properties）</strong>] を選択し、[<strong>Android</strong>] を選択して、指定するプロジェクト ターゲットのチェックボックスをオンにします。</p>
  </li>
  <li>[プロパティ（Properties）] セクションで、必要なすべてのフィールドに入力します。
 <ul>
   <li>アプリケーション名 (Application name) を入力します。<em></em>アプリケーション名はユーザーにわかりやすいアプリケーションのタイトルにします。この名前が Android 携帯端末に表示されます。</li>
   <li>パッケージ名 (Package name) を入力します。<em></em>これは（Java プログラミング言語でのパッケージのルールに従った）パッケージの名前空間であり、作成するソース コードはすべてこの中に含まれます。</li>
   <li>[Activity を作成（Create Activity）] を選択し（オプションですが、一般的な手順です）、メインの Activity クラスの名前を入力します。<em></em></li>
   <li>[SDK の最小バージョン（Min SDK Version）] を入力します。<em></em>これは、そのアプリケーションを正常に実行するために必要となる API の最小レベルを示す番号です。ここで入力すると、<code>minSdkVersion</code> 属性が Android マニフェスト ファイルの <a href="{@docRoot}guide/topics/manifest/uses-sdk-element.html">&lt;uses-sdk&gt;</a> に自動的に設定されます。使用する適切な API レベルがわからない場合は、ビルド ターゲット（Build Target）にリストされている API レベル(API Level)をコピーします。</li>
 </ul>
  </li>
    </ul>
  </li>
  <li>[<strong>完了（Finish）</strong>] をクリックします。</li>
</ol>

<p class="note"><strong>ヒント:</strong> 新規プロジェクト ウィザードは、ツールバーの [新規（New）] アイコンからも開始できます。<em></em></p>

<p>新規プロジェクト ウィザードを完了すると、ADT は新しいプロジェクトに次のフォルダとファイルを作成します:</p>
  <dl>
    <dt><code>src/</code></dt>
  <dd>スタブ Activity Java ファイルが含まれます。アプリケーションの他のすべての Java ファイルも含まれます。</dd>
    <dt><code><em>&lt;Android Version&gt;</em>/</code>（例: <code>Android 1.1/</code>）</dt>
  <dd>アプリケーションのビルド対象となる <code>android.jar</code> ファイルが含まれます。これは、新規プロジェクト ウィザードで選択したビルド ターゲットによって決まります。<em></em></dd>
    <dt><code>gen/</code></dt>
  <dd>ADT により生成された Java ファイル（<code>R.java</code> ファイル、AIDL ファイルから作成されたインターフェースなど）がこのフォルダに含まれます。</dd>
    <dt><code>assets/</code></dt>
  <dd>このフォルダは空です。未加工のアセット ファイルの保存に使用できます。<a href="{@docRoot}guide/topics/resources/index.html">Resources and Assets</a>をご覧ください。</dd>
    <dt><code>res/</code></dt>
  <dd>アプリケーションのリソース用（描画ファイル、レイアウト ファイル、文字列値など）のフォルダです。<a href="{@docRoot}guide/topics/resources/index.html">Resources and Assets</a>をご覧ください。</dd>
    <dt><code>AndroidManifest.xml</code></dt>
  <dd>このプロジェクトの Android マニフェストです。<a href="{@docRoot}guide/topics/manifest/manifest-intro.html">The AndroidManifest.xml File</a>をご覧ください。</dd>
    <dt><code>project.properties</code></dt>
  <dd>このファイルには、ビルド ターゲットのようなプロジェクトの設定が含まれます。このファイルはプロジェクトに不可欠なので、ソース リビジョン管理システムで管理する必要があります。このファイルを手動で編集しないでください。プロジェクトのプロパティを編集するには、プロジェクト フォルダを右クリックして、[プロパティ（Properties）] を選択します。</dd>
  </dl>


<h2 id="Running">アプリケーションの実行</h2>

<p>注意してください。<em></em>アプリケーションを Android エミュレータで実行する前に、Android 仮想デバイス（AVD）を作成する<strong>必要があります</strong>。AVD では、エミュレータで使用する Android プラットフォームを指定します。詳しくは <a href="{@docRoot}guide/developing/tools/avd.html">Android 仮想デバイス</a> のドキュメントをご覧ください。ただし、すぐにアプリケーションを実行したい場合は、次の簡単な手順に従って AVD を作成してください。</p>

<p>携帯端末の実機でのみアプリケーションを実行する場合は、AVD は必要ありません。この場合のアプリケーションの実行について詳しくは、<a href="{@docRoot}guide/developing/device.html">Developing On a Device</a> をご覧ください。</p>

<h3 id="CreatingAnAvd">AVD の作成</h3>

<p>詳しい説明はこのドキュメントの範囲外なので、AVD を作成する基本的な手順のみをここに示します:</p>

<ol>
  <li>コマンドライン（たとえば Windows では「コマンド プロンプト」アプリケーション、Mac/Linux では「ターミナル」）を開き、SDK パッケージの <code>tools/</code> ディレクトリに移動します。</li>
  <li>最初に、配備ターゲットを選択する必要があります。選択可能なターゲットを表示するには、次のコマンドを実行します:
    <pre>android list targets</pre>
    <p>次のように選択可能な Android ターゲットのリストが表示されます:</p>
<pre>
id:1
    Name: Android 1.1
    Type: platform
    API level: 2
    Skins: HVGA (default), HVGA-L, HVGA-P, QVGA-L, QVGA-P
id:2
    Name: Android 1.5
    Type: platform
    API level: 3
    Skins: HVGA (default), HVGA-L, HVGA-P, QVGA-L, QVGA-P
</pre>
    <p>アプリケーションを実行する Android プラットフォームに一致するターゲットを探します。<code>id</code> の整数を書き留めておき、次のステップで使用します。</p>
  </li>
  <li>選択した配備ターゲットを使用して、新しい AVD を作成します。次のコマンドを実行します:
    <pre>android create avd --name <em>&lt;your_avd_name&gt;</em> --target <em>&lt;targetID&gt;</em></pre>
  <li>カスタム ハードウェア プロファイルを作成するかどうかの問い合わせがあります。「yes」と答えると、携帯端末ハードウェアのさまざまな要素を定義するための一連のプロンプトが開始されます（空白のまま入力すると、かっこ内に表示されたデフォルト値が使用されます）。または、Enter キーを押すと、すべてデフォルト値が使用されます（「no」がデフォルトです）。</li>
  </li>
</ol>

<p>これで AVD が作成できました。次のセクションでは、エミュレータでアプリケーションを起動する際に、AVD がどのように使用されるかについて説明します。</p>

<p>AVD の作成と管理について詳しくは、<a href="{@docRoot}guide/developing/tools/avd.html">Android 仮想デバイス</a> のドキュメントをご覧ください。</p>


<h3 id="RunningYourApplication">アプリケーションの実行</h3>

<p class="note"><strong>注:</strong> アプリケーションを実行する前に、アプリケーションのビルド ターゲットを満たすターゲットを指定した AVD を必ず作成してください。ビルド ターゲットの要件を満たす AVD が見つからない場合、それを示すコンソール エラーが表示され、起動は中止されます。</p>

<p>アプリケーションを実行（またはデバッグ）するには、Eclipse のメイン メニューで [<strong>実行（Run）</strong>] &gt; [<strong>実行（Run）</strong>]（または [<strong>実行（Run）</strong>] &gt; [<strong>デバッグ（Debug）</strong>]）を選択します。ADT プラグインはそのプロジェクトのデフォルトの起動構成を自動的に作成します。</p>

<p>アプリケーションの実行またはデバッグを選択すると、Eclipse では以下が行われます:</p>

<ol>
  <li>プロジェクトがコンパイルされます（最後のビルド以降、変更があった場合）。</li>
  <li>デフォルトの起動構成が作成されます（そのプロジェクトでまだ作成されていない場合）。</li>
  <li>エミュレータまたは端末（起動構成で定義された配備ターゲットに基づきます）にアプリケーションがインストールされ、起動されます。
    <p>デフォルトでは、Android アプリケーションの起動構成ではデバイス ターゲットの選択に「自動ターゲット」モードを使用します。自動ターゲット モードでの配備ターゲットの選択について詳しくは、下記の<a href="#AutoAndManualTargetModes">自動または手動のターゲット モード</a>をご覧ください。</p>
  </li>
</ol>

<p>デバッグの場合は、アプリケーションは「デバッガ待ち」モードで開始されます。デバッガの接続後、Eclipse はデバッグ パースペクティブを開きます。</p>

<p>プロジェクトで使用する起動構成を設定または変更するには、構成マネージャを使用します。詳しくは<a href="#launchconfig">起動構成の作成</a>をご覧ください。</p>


<h2 id="RunConfig">起動構成の作成</h2>

<p>起動構成では、実行するプロジェクト、開始する Activity、使用するエミュレータ オプションなどを指定します。プロジェクトを初めて Android アプリケーションとして実行すると、ADT は自動的に起動構成を作成します。<em></em>デフォルトの起動構成は、デフォルトのプロジェクト アクティビティを起動し、自動ターゲット モードで端末を選択します（優先 AVD が指定されていない場合）。デフォルト設定がプロジェクトに適さない場合は、起動構成をカスタマイズするか、新規作成することができます。</p>

<p>起動構成を作成または変更するには、使用している Eclipse のバージョンに合わせて、次の手順どおりに操作します:</p>

<ol>
  <li>構成マネージャを開きます。
 <ul>
   <li>Eclipse 3.3（Europa）では、[<strong>実行（Run）</strong>] &gt; [<strong>実行ダイアログを開く（Open Run Dialog）</strong>]（または [<strong>デバッグ ダイアログを開く（Open Debug Dialog）</strong>]）を選択します。
   </li>
   <li>Eclipse 3.4（Ganymede）では、[<strong>Run（実行）</strong>] &gt; [<strong>実行の構成（Run Configurations）</strong>]（または [<strong>デバッグの構成（Debug Configurations）</strong>]）を選択します。
   </li>
  </ul>
  </li>
  <li>[<strong>Android アプリケーション（Android Application）</strong>] 項目を展開し、新しい構成を作成するか、既存の構成を開きます。
    <ul>
  <li>新しい構成を作成するには: 
 <ol>
   <li>[<strong>Android アプリケーション（Android Application）</strong>] を選択し、<em></em>リストの上にある 新規起動の構成（New launch configuration） アイコンをクリックします（または [<strong>Android アプリケーション（Android Application）</strong>] を右クリックして、[<strong>新規（New）</strong>] をクリックします）。</li>
   <li>この構成の名前を入力します。</li>
   <li>[Android] タブで、この構成を使用して実行するプロジェクトを参照し、選択します。</li>
 </ol>
  <li>既存の構成を開くには、[<strong>Android アプリケーション（Android Application）</strong>] の下にネストされているリストからその構成名を選択します。</li>
    </ul>
  </li>
  <li>必要に応じて起動構成の設定を変更します。
    <p>[ターゲット（Target）] タブでは、アプリケーションを実行する AVD の選択を手動（Manual）モードで行うか、自動（Automatic）モードで行うかを考えます（次の<a href=#AutoAndManualModes">自動または手動のターゲット モード</a>のセクションをご覧ください）。</p>
  </li>
</ol>


<h3 id="AutoAndManualTargetModes">自動または手動のターゲット モード</h3>

<p>デフォルトでは、起動構成には、<strong>自動</strong>ターゲット モードで選択された AVD が使用されます。このモードでは、ADT は次の方法により、アプリケーションの AVD を選択します:</p>

<ol>
  <li>既に実行中の端末またはエミュレータがあり、その AVD 構成がアプリケーションのビルド ターゲットの要件を満たす場合は、その端末またはエミュレータにアプリケーションがインストールされ、実行されます。</li>
  <li>端末またはエミュレータが複数実行中の場合は、そのうちのビルド ターゲットの要件を満たすものが「デバイス選択（Device Chooser）」に表示されるので、その中から選択できます。</li>
  <li>ビルド ターゲットの要件を満たす実行中の端末やエミュレータがない場合は、ADT は使用可能な AVD を調べます。ビルド ターゲットの要件を満たす AVD があれば、その AVD を使用して新しいエミュレータが起動され、そこにアプリケーションがインストールされ、実行されます。</li>
  <li>上記を満たすものがない場合は、アプリケーションは実行されず、ビルド ターゲット要件を満たす既存の AVD がないというエラーがコンソールに表示されます。</li>
</ol>

<p>ただし起動構成で「優先 AVD」が選択されている場合は、アプリケーションは常にその AVD に配備されます。<em></em>その AVD がまだ実行されていない場合は、新しいエミュレータが起動されます。</p>
<p>起動構成が<strong>手動</strong>モードの場合は、アプリケーションを実行するたびに、「Device Chooser」が表示されるので、使用する AVD を選択できます。</p>

<h2 id="Signing">アプリケーションへの署名</h2>

<p>Android アプリケーションの開発を始めると、Android アプリケーションをシステムがエミュレータや実機にインストールする前に、どの Android アプリケーションにもデジタル署名が必要であることがわかります。署名には、デバッグ キーを使用する方法（エミュレータや開発用端末ですぐにテストする場合）と、非公開キーを使用する方法（アプリケーションを配布する場合）の 2 つがあります。</p>
<p>ADT プラグインでは、アプリケーションをエミュレータや開発用端末にインストールする前に、.apk ファイルがデバッグ キーを使用して署名されるので、開発を早めることができます。つまり、独自の非公開キーを生成する必要がなく、Eclipse からアプリケーションをすぐに実行できます。Keytool に ADT がアクセスできれば、デベロッパーが特に操作する必要はありません。ただし、アプリケーションを公開する場合は、SDK ツールが生成するデバッグ キーではなく、独自の非公開キーを使用してアプリケーションに署名する<strong>必要があります</strong>。</p>
<p><a href="{@docRoot}guide/publishing/app-signing.html">アプリケーションへの署名</a>をご覧ください。Android でのアプリケーションへの署名と、Android アプリケーション デベロッパーにとっての署名の意味について説明しています。このドキュメントには、ADT のエクスポート ウィザードを使用してアプリケーションをエクスポートし、署名するためのガイドも含まれています。</p>

<h2 id="Tips">Eclipse のヒント </h2>

<h3 id="arbitraryexpressions">Eclipse での任意の Java コードの実行</h3>

<p>Eclipse のブレークポイントで中断したとき、任意のコードを実行できます。たとえば「zip」という文字列引数を使用する関数では、パッケージと呼び出しクラスのメソッドに関する情報を取得できます。任意の静的メソッドを呼び出すこともできます。たとえば <code>android.os.Debug.startMethodTracing()</code> と入力すると、dmTrace が起動されます。 </p><p>コードの実行ウィンドウを開き、メイン メニューから [<strong>ウィンドウ（Window）</strong>] &gt; [<strong>ビューの表示（Show View）</strong>] &gt; [<strong>表示（Display）</strong>] を選択すると、簡単なテキスト エディタである [表示（Display）] ウィンドウが開きます。式を入力し、そのテキストをハイライト表示し、'J' アイコンをクリックして（または Ctrl+Shift+D キーを押して）そのコードを実行します。コードは、選択したスレッド（ブレークポイントまたはシングルステップ ポイントで停止している必要があります）のコンテキストで実行されます（手動でスレッドを強制停止した場合は、シングルステップを 1 回実行する必要があります。スレッドが Object.wait() 状態の場合は、上記を実行できません）。</p><p>現在、ブレークポイントで中断している場合は、ソース コードの一部をハイライト表示し、Ctrl+Shift+D キーを押して実行することができます。 </p><p>同じスコープ内のテキストの一部をハイライト表示するには、Alt+Shift+上矢印キーを押して、より広い範囲の閉じたブロック（複数可）を選択するか、下矢印キーを押して選択範囲を小さくすることができます。 </p><p>Eclipse で [表示（Display）] ウィンドウを使用した入力とその応答のサンプルを次に示します。</p>

<table width="100%" border="1">
    <tr>
 <th scope="col">入力</th>
 <th scope="col">応答</th>
    </tr>
    <tr>
 <td><code>zip</code></td>
 <td><code>(java.lang.String) 
 /work/device/out/linux-x86-debug/android/app/android_sdk.zip</code></td>
    </tr>
    <tr>
 <td><code>zip.endsWith(&quot;.zip&quot;)</code></td>
 <td><code>(boolean) true</code></td>
    </tr>
    <tr>
 <td><code>zip.endsWith(&quot;.jar&quot;)</code></td>
 <td><code>(boolean) false</code></td>
    </tr>
</table>
<p>デバッガではなくスクラップブック ページを使用しても、任意のコードを実行できます。Eclipse ドキュメントで「スクラップブック」を検索してください。</p>

<h3>DDMS の手動による実行</h3>

<p>ADT プラグインを使用するデバッグをおすすめしますが、手動で DDMS を実行し、ポート 8700 でデバッグするように Eclipse を設定することができます（<strong>注:</strong> 最初に必ず <a href="{@docRoot}guide/developing/tools/ddms.html">DDMS</a> を起動してください）。 </p>

<!-- TODO: clean this up and expand it to cover more wizards and features
<h3>ADT Wizards</h3>

<p>Notice that the "New Android Project" wizard has been expanded to use the multi-platform
capabilities of the new SDK.</p>

<p>There is now a "New XML File" wizard that lets you create skeleton XML resource
files for your Android projects. This makes it easier to create a new layout, a new menu, a
new strings file, etc.</p>

<p>Both wizards are available via <strong>File > New</strong> and new icons in the main
Eclipse toolbar (located to the left of the Debug and Run icons). 
If you do not see the new icons, you may need to select <strong>Window > Reset
Perspective</strong> from the Java perspective.</p>
-->
